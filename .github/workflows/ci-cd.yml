name: Azure Terraform CI/CD

on:
  push:
    branches:
      - main

jobs:
  terraform-checks:
    name: Terraform Format & Validate
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      - name: Terraform Init
        run: terraform init
        working-directory: terraform
    
      - name: Terraform Format
        run: terraform fmt -check
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

  ansible-lint:
    name: Lint Ansible Playbook
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Ansible & Lint
        run: |
          pip install ansible-lint
          ansible-lint ansible/playbook.yml

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: [terraform-checks, ansible-lint]

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: terraform
        env:
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
          TF_VAR_ssh_public_key: ${{ secrets.TF_VAR_SSH_PUBLIC_KEY }}

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/tfplan

      - name: Copy .terraform.lock.hcl to workspace
        run: cp terraform/.terraform.lock.hcl /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/.terraform.lock.hcl
  
      - name: Upload .terraform.lock.hcl
        uses: actions/upload-artifact@v4
        with:
          name: terraform-workspace
          path: /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/.terraform.lock.hcl
          include-hidden-files: true

  manual-approval:
    name: Manual Approval
    runs-on: ubuntu-latest
    needs: terraform-plan
    permissions:
      issues: write
    steps:
      - name: Await Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ vars.APPROVERS }}  # Specify the approvers
          minimum-approvals: 1
          issue-title: "Manual Approval Required for Terraform Apply"
          issue-body: "Terraform plan has completed. Please approve or deny the deployment."

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: manual-approval
    permissions:
      id-token: write
      contents: read
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8
          terraform_wrapper: false


      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform
      
      - name: Download .terraform.lock.hcl
        uses: actions/download-artifact@v4
        with:
          name: terraform-workspace
          path: terraform
  

      #Force unlock Terraform state if a lock exists
      - name: Terraform Force Unlock (on failure)
        if: failure()
        run: |
          LOCK_ID=$(terraform force-unlock -dry-run | grep "Lock ID:" | awk '{print $NF}')
          if [ -n "$LOCK_ID" ]; then
            terraform force-unlock "$LOCK_ID" || echo "No active lock found"
          else
            echo "No lock detected."
          fi
        working-directory: terraform

      - name: Initialiser Terraform
        run: terraform init
        working-directory: terraform
      
      - name: Terraform Apply
        #run: terraform destroy -auto-approve
        run: terraform apply -auto-approve tfplan
        working-directory: terraform
        env:
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
          TF_VAR_ssh_public_key: ${{ secrets.TF_VAR_SSH_PUBLIC_KEY }}

      - name: Save Terraform Output
        run: |
          terraform output -raw vm_public_ip > ../tf_output.txt
        working-directory: terraform
      
      - name: Upload Terraform Output
        uses: actions/upload-artifact@v4
        with:
          name: tf-output
          path: tf_output.txt
        
  ansible:
    runs-on: ubuntu-latest
    name: Ansible
    needs: terraform-apply
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Download Terraform Output
        uses: actions/download-artifact@v4
        with:
          name: tf-output
        
      - name: Read Instance IP
        id: get-instance-ip
        run: echo "INSTANCE_IP=$(cat tf_output.txt)" >> $GITHUB_ENV
        
      - name: Add private key to SSH Agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Run Ansible Playbook
        run: |
          echo "[web_servers]" > inventory.ini
          echo "${{ env.INSTANCE_IP }} ansible_user=azureuser ansible_ssh_common_args='-o ForwardAgent=yes' ansible_python_interpreter=/usr/bin/python3" >> inventory.ini
          cat inventory.ini
          ansible-playbook -i inventory.ini playbook.yml
        working-directory: ansible
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"